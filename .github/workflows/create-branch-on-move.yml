name: create-branch-on-move
on:
  issues:
    types: [opened]
jobs:
  move-new-issues-to-new:
    permissions:
      issues: write
      repository-projects: write
    runs-on: ubuntu-latest
    steps:
      - name: Get project ID
        env:
          GITHUB_TOKEN: ${{ secrets.NEW_ISSUE_ACTION_PAT }}
          ACCOUNT: KCP-DEV
          PROJECT_NUMBER: 12
        run: |
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            query($account: String!, $number: Int!) {
              organization(login: $account){
                projectNext(number: $number) {
                  id
                }
              }
            }' -f account=$ACCOUNT -F number=$PROJECT_NUMBER > project_id.json
            
          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_id.json) >> $GITHUB_ENV
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.NEW_ISSUE_ACTION_PAT }}
        run: |
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            query($p_id: ID!) { 
              node(id: $p_id) { 
                ... on ProjectNext { 
                  fields(first: 20) { 
                    nodes { 
                      id 
                      name 
                      settings 
                    } 
                  } 
                }
              } 
            }' -f p_id=$PROJECT_ID > project_data.json
            
          echo content=`cat project_data.json`
          echo 'STATUS_FIELD_ID='$(jq '.data.node.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.node.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name=="New") |.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE_FIELD_ID='$(jq '.data.node.fields.nodes[] | select(.name== "Date Posted") | .id' project_data.json) >> $GITHUB_ENV
      - name: Add Issue to project
        env:
          GITHUB_TOKEN: ${{ secrets.NEW_ISSUE_ACTION_PAT }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id="$( gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
      - name: Get date
        run: echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Set fields
        env:
          GITHUB_TOKEN: ${{ secrets.NEW_ISSUE_ACTION_PAT }}
        run: |
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
              $date_field: ID!
              $date_value: String!
            ) {
              set_status: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: $status_value
              }) {
                projectNextItem {
                  id
                  }
              }
              set_date_posted: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $date_field
                value: $date_value
              }) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent
